[alias]

a = add

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

b = branch

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

c = commit

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Commit all changes.

ca = !git add --all && git commit

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

co = checkout

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cp = cherry-pick

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Credit an author on the latest commit.

credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" --no-edit --reuse-message=HEAD; \
        fi \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Credit a co-author on the latest commit.
#
# https://help.github.com/en/articles/creating-a-commit-with-multiple-authors
# https://help.github.com/en/articles/creating-a-commit-on-behalf-of-an-organization

credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

d = diff -- . ':!*package-lock.json' ':!*yarn.lock'

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dc = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

f = fetch

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Show custom text-based graphical log of the commit history.

g = log --graph --pretty=custom

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Allow `$ git git git...`

git = !exec git

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Show custom log of the commit history.

l = log --pretty=custom

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# List contributors.

lc = shortlog --email --numbered --summary

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# List remote branches.

lrb = "!f() { \
        remote=\"${1:-origin}\"; \
        git ls-remote --heads \"$remote\"; \
    }; f"

p = push

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

r = rebase

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Remove the tag with the specified tag name if
# exists and tag the latest commit with that name.

retag = "!f() { \
        git tag --delete \"$1\" &> /dev/null; \
        git tag \"$1\"; \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Remove last commits (by default it removes the last commit).

rlc = "!f() { \
        number_of_commits=\"${1:-1}\"; \
        git reset --hard \"HEAD~$number_of_commits\"; \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

s = status

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search commits by source code.

sc = "!f() { \
        git log --date=short --decorate --pretty=custom -S\"$1\"; \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Seach commits by commit message.

sm = "!f() { \
        git log --date=short --decorate --pretty=custom --grep=\"$1\"; \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Update the content of the last commit by including all
# staged changes.
#
# Note: "Update" is used loosely. Git doesn't actually
# update the last commit, but instead, creates a new commit
# based on the last commit and replaces it.

u = commit --amend --no-edit

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Update the content of the last commit by including all
# local changes.

ua = !git add --all && git commit --amend --no-edit

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Undo last commits (by default it undoes the last commit).

ulc = "!f() { \
        number_of_commits=\"${1:-1}\"; \
        git reset --soft \"HEAD~$number_of_commits\"; \
    }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Update the content of the last commit by including all
# staged changes as well as allow the user to change its
# commit message.

um = commit --amend

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete all fully-merged branches except master, develop and the current one
bd = "!f() { git branch | grep -v '^  master$' | grep -v '^  main$' | grep -v '^  develop$' | grep -v ^* | xargs git branch -d; }; f"
bdf = "!f() { git branch | grep -v '^  master$' | grep -v '^  main$' | grep -v '^  develop$' | grep -v ^* | xargs git branch -D; }; f"

# Start web-based visualizer.

w = instaweb --httpd=webrick

[commit]
# Force GPG signing of commits.
gpgsign = true

[gpg]
# Add path to program in ~/.gitconfig.local

[core]
abbrev = 12
attributesFile = ~/.config/git/attributes
autocrlf = input
excludesFile = ~/.config/git/ignore

[help]
# If a command is mistyped, make Git automatically
# run the command it thinks the user wanted to type.
autoCorrect = immediate

[init]
defaultBranch = main

[push]
# Make `git push` automatically push relevant
# annotated tags when pushing branches out.
followTags = true
autoSetupRemote = true

[pull]
ff = only

[fetch]
prune = true

[user]
# Do not guess the user's identity.
# https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
useConfigOnly = true
# [!] DO NOT store sensitive information such as the Git user
# credentials (`name` / `email`), or things such as the `signingkey`
# in this file, add them in `~/.gitconfig.local`!
#
# See also: https://github.com/alrra/dotfiles#gitconfiglocal
# add name, email, signingkey, to ~/.gitconfig.local
name={{ .name }}
email={{ .email }}

[include]
# Load local configs.
# https://git-scm.com/docs/git-config#_includes
#
# [!] The following needs to remain at the end of this file in
#     order to allow any of the above configs to be overwritten
#     by the local ones
path = ~/.config/git/config.local

{{- if (eq .chezmoi.os "darwin") -}}
[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # use n and N to move between diff sections
    line-numbers = true
    side-by-side = true

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default

[init]

    defaultBranch = main

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

{{ end -}}
